<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.9.0"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:gl="clr-namespace:Bonsai.Shaders;assembly=Bonsai.Shaders"
                 xmlns:res="clr-namespace:Bonsai.Resources;assembly=Bonsai.System"
                 xmlns:ipy="clr-namespace:Bonsai.Scripting.IronPython;assembly=Bonsai.Scripting.IronPython"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="gl:CreateWindow">
          <gl:Width>640</gl:Width>
          <gl:Height>480</gl:Height>
          <gl:VSync>On</gl:VSync>
          <gl:SwapSync>false</gl:SwapSync>
          <gl:ClearColor>Black</gl:ClearColor>
          <gl:ClearMask>DepthBufferBit ColorBufferBit</gl:ClearMask>
          <gl:CursorVisible>true</gl:CursorVisible>
          <gl:Location xsi:nil="true" />
          <gl:WindowBorder>Resizable</gl:WindowBorder>
          <gl:WindowState>Normal</gl:WindowState>
          <gl:DisplayDevice>Primary</gl:DisplayDevice>
          <gl:TargetRenderFrequency>0</gl:TargetRenderFrequency>
          <gl:TargetUpdateFrequency xsi:nil="true" />
          <gl:RenderState>
            <gl:StateConfiguration xsi:type="gl:EnableState">
              <gl:Capability>Blend</gl:Capability>
            </gl:StateConfiguration>
            <gl:StateConfiguration xsi:type="gl:BlendFunctionState">
              <gl:SourceFactor>SrcAlpha</gl:SourceFactor>
              <gl:DestinationFactor>OneMinusSrcAlpha</gl:DestinationFactor>
            </gl:StateConfiguration>
            <gl:StateConfiguration xsi:type="gl:EnableState">
              <gl:Capability>PointSprite</gl:Capability>
            </gl:StateConfiguration>
            <gl:StateConfiguration xsi:type="gl:EnableState">
              <gl:Capability>ProgramPointSize</gl:Capability>
            </gl:StateConfiguration>
          </gl:RenderState>
          <gl:GraphicsMode>
            <gl:ColorFormat>
              <gl:Red>8</gl:Red>
              <gl:Green>8</gl:Green>
              <gl:Blue>8</gl:Blue>
              <gl:Alpha>8</gl:Alpha>
            </gl:ColorFormat>
            <gl:Depth>16</gl:Depth>
            <gl:Stencil>0</gl:Stencil>
            <gl:Samples>0</gl:Samples>
            <gl:AccumulatorFormat>
              <gl:Red>0</gl:Red>
              <gl:Green>0</gl:Green>
              <gl:Blue>0</gl:Blue>
              <gl:Alpha>0</gl:Alpha>
            </gl:AccumulatorFormat>
            <gl:Buffers>2</gl:Buffers>
            <gl:Stereo>false</gl:Stereo>
          </gl:GraphicsMode>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="gl:ShaderResources">
          <gl:Shaders>
            <gl:ShaderConfiguration xsi:type="gl:Material">
              <gl:Name>Particles</gl:Name>
              <gl:RenderState />
              <gl:ShaderUniforms>
                <gl:UniformConfiguration xsi:type="gl:Vec4Uniform">
                  <gl:Name>color</gl:Name>
                  <gl:Value>
                    <gl:X>1</gl:X>
                    <gl:Y>1</gl:Y>
                    <gl:Z>1</gl:Z>
                    <gl:W>1</gl:W>
                  </gl:Value>
                </gl:UniformConfiguration>
              </gl:ShaderUniforms>
              <gl:BufferBindings />
              <gl:FramebufferAttachments />
              <gl:VertexShader>particles.vert</gl:VertexShader>
              <gl:FragmentShader>particles.frag</gl:FragmentShader>
            </gl:ShaderConfiguration>
          </gl:Shaders>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="res:LoadResources" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="gl:RenderFrame" />
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Script>import clr
clr.AddReference("OpenTK")
from OpenTK import Vector2, Vector3
from System import Array, Single, Random

# Simulation parameters
n = 1000
dt = Single(1.0 / 60.0)
gravity = Vector2(0, -1)
particles = None

# Particle generation parameters
birthrate = 5
generator = Random()
source = Vector2(0, 0.25)
minvelX = -0.2
maxvelX = 0.2
minvelY = 0.5
maxvelY = 1.0
minSize = 5.0
maxSize = 15.0
mass = 1.0

# Particle behavior definition class
class Particle:
  def __init__(self):
    self.pos = Vector2.Zero
    self.vel = Vector2.Zero
    self.accel = Vector2.Zero
    self.mass = 0.0
    self.size = 0.0
    self.active = False

  def activate(self,pos,vel,mass,size):
    self.pos = pos
    self.vel = vel
    self.accel = Vector2.Zero
    self.mass = Single(mass)
    self.size = Single(size)
    self.active = True

  def addforce(self,force):
    self.accel += force / self.mass

  def update(self,dt):
    self.pos += dt * self.vel
    self.vel += dt * self.accel
    self.accel = Vector2.Zero

def random(generator,minval,maxval):
  return generator.NextDouble() * (maxval - minval) + minval

# Initialization
def load():
  global particles
  particles = []
  for i in range(n):
    particle = Particle()
    particles.append(particle)

# Simulation step
@returns(Array[Vector3])
def process(value):
  spawncount = birthrate
  for p in particles:
    if p.active:
      p.addforce(gravity)
      p.update(dt)
      if p.pos.Y &lt; -1:
        p.active = False
    elif spawncount &gt; 0:
      vx = random(generator,minvelX,maxvelX)
      vy = random(generator,minvelY,maxvelY)
      size = random(generator,minSize,maxSize)
      p.activate(source,Vector2(vx,vy),mass,size)
      spawncount -= 1

  return Array[Vector3]([Vector3(p.pos.X,p.pos.Y,p.size) for p in particles if p.active])</ipy:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="gl:DrawArrays">
          <gl:ShaderName>Particles</gl:ShaderName>
          <gl:DrawMode>Points</gl:DrawMode>
          <gl:Usage>DynamicDraw</gl:Usage>
          <gl:VertexAttributes>
            <gl:VertexAttributeMapping>
              <gl:Size>3</gl:Size>
              <gl:Normalized>false</gl:Normalized>
              <gl:Type>Float</gl:Type>
            </gl:VertexAttributeMapping>
          </gl:VertexAttributes>
        </Combinator>
      </Expression>
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="1" To="2" Label="Source1" />
      <Edge From="3" To="4" Label="Source1" />
      <Edge From="4" To="5" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>